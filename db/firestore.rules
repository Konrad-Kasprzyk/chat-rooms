rules_version = '2';
service cloud.firestore {
  match /databases/{database}/documents {
    function signedIn() {
      return request.auth.uid != null
    }
    function noPrefixSegmentOrTestingUser(request, collection) {
      return (request.path[3] == collection) || request.auth.uid.matches(".*normkeeper-testing.*")
    }
    function hasUsedArrayUnionWithOneItem(newArray, oldArray){
      return newArray.size() == oldArray.size() + 1
          && newArray.hasAll(oldArray)
    }
    function hasProjectIdSet(foo){
      return foo.resource.data.keys().hasAll(['projectId']);
    }

    match /{document=**} {
      allow read, write: if false
    }
    match /{prefixSegment=**}/testing/{id} {
      allow read, write: if (request.auth.uid != null) && (request.path[3] == "testing" || request.auth.uid.matches(".*normkeeper-testing.*"))
    }
    match /{prefixSegment=**}/projects/{id} {
      allow read, write: if (request.auth.uid != null) && (request.path[3] == "projects" || request.auth.uid.matches(".*normkeeper-testing.*"))
    }
    match /{prefixSegment=**}/tasks/{id} {
      allow read, write: if (request.auth.uid != null) && (request.path[3] == "tasks" || request.auth.uid.matches(".*normkeeper-testing.*"))
    }
    match /{prefixSegment=**}/statsChunks/{id} {
      function hasProperFinishedTasksFields(task){
        return task.day <= request.time && task.day + duration.value(1, 'm') > request.time
      }
      allow create: if signedIn() 
      && noPrefixSegmentOrTestingUser(request, "statsChunks") 
      allow update: if signedIn() 
      && noPrefixSegmentOrTestingUser(request, "statsChunks") 
      && request.resource.data.finishedTasks.size() > 0
      && hasUsedArrayUnionWithOneItem(request.resource.data.finishedTasks, resource.data.finishedTasks)
      && hasProperFinishedTasksFields(request.resource.data.finishedTasks[request.resource.data.finishedTasks.size() - 1])
      allow read: if signedIn() && noPrefixSegmentOrTestingUser(request, "statsChunks")
    }
  }
}