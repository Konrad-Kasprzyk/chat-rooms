rules_version = '2';
service cloud.firestore {
  match /databases/{database}/documents {

    match /{document=**} {
    allow read, write: if true
    }

    function signedIn() {
      return request.auth.uid != null
    }
    function noPrefixSegmentOrTestingUser(request, collection) {
      return (request.path[3] == collection) || request.auth.uid.matches(".*normkeeper-testing.*")
    }
    function hasUsedArrayUnionWithOneItem(newArray, oldArray){
      return newArray.size() == oldArray.size() + 1
          && newArray.hasAll(oldArray)
    }
    function hasProjectIdSet(foo){
      return foo.resource.data.keys().hasAll(['projectId']);
    }

    // match /{prefixSegment=**}/foo/{id} {
    //   allow get;
    //   // Allow getting documents that were modified 1 minute ago
    //   // change duration.time to function with (1, "m")
    //   // allow list: if resource.data.modificationTime > (request.time - duration.time(0, 1, 0, 0))
    //   // allow list: if resource.data.modificationTime > (request.time - duration.time(0, 0, 2, 0))
    //   allow list: if resource.data.modificationTime >= request.time
    //   allow write: if true;
    // }

    match /{prefixSegment=**}/users/{id} {
      allow get;
      // Allow getting max 3 documents per query
      allow list: if request.query.limit != null && request.query.limit < 4;
      allow write: if true;
    }
    match /{prefixSegment=**}/testing/{id} {
      allow read, write: if (request.auth.uid != null) && (request.path[3] == "testing" || request.auth.uid.matches(".*normkeeper-testing.*"))
    }
    match /{prefixSegment=**}/projects/{id} {
      allow read, write: if (request.auth.uid != null) && (request.path[3] == "projects" || request.auth.uid.matches(".*normkeeper-testing.*"))
    }
    match /{prefixSegment=**}/tasks/{id} {
      allow read, write: if (request.auth.uid != null) && (request.path[3] == "tasks" || request.auth.uid.matches(".*normkeeper-testing.*"))
    }
    match /{prefixSegment=**}/statsChunks/{id} {
      function hasProperFinishedTasksFields(task){
        return task.day <= request.time && task.day + duration.value(1, 'm') > request.time
      }
      allow create: if signedIn() 
      && noPrefixSegmentOrTestingUser(request, "statsChunks") 
      allow update: if signedIn() 
      && noPrefixSegmentOrTestingUser(request, "statsChunks") 
      && request.resource.data.finishedTasks.size() > 0
      && hasUsedArrayUnionWithOneItem(request.resource.data.finishedTasks, resource.data.finishedTasks)
      && hasProperFinishedTasksFields(request.resource.data.finishedTasks[request.resource.data.finishedTasks.size() - 1])
      allow read: if signedIn() && noPrefixSegmentOrTestingUser(request, "statsChunks")
    }

    match /{document=**} {
      allow read, write: if true
    }
  }
}